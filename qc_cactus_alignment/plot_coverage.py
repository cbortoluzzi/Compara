#!/usr/bin/env python


# Author : @cb46


import argparse
from ete3 import Tree
from pathlib import Path
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from collections import defaultdict


parser = argparse.ArgumentParser(description = 'Plot coverage of 100 replicates')
parser.add_argument('--species_list' , help = 'Tab delimited species list file')
parser.add_argument('--cov', help = 'Directory with all coverage files as generated by maf_stream coverage')
parser.add_argument('--refGenome', help = 'Name of reference genome')
parser.add_argument('--bp', help = 'Length of the region in base pairs [default = 1000000]', type = int, default = 1000000)
parser.add_argument('--t', help = 'Phylogenetic tree')
parser.add_argument('--o', help = 'Output directory')



def order_species_by_phylo(tree, cov_f, bp):
	cov_d = defaultdict(list)
	t = Tree(tree)
	# Reroot the tree to the outgroup
	t.set_outgroup('Hydropsyche_tenuis')
	for node in t.traverse('postorder'):
		if node.is_leaf():
			coverage = get_coverage(node.name, cov_f, cov_d, bp)
	return coverage



def get_coverage(node, cov_f, dictionary, bp):
	for cov in cov_f:
		with open(cov) as f:
			# Skip header
			next(f)
			for line in f:
				query, target, lengthOfReference, percentCoverage, basesCoverage = line.strip().split()
				species = '_'.join(target.split('_', 2)[0:2]).capitalize()
				basesCoverage = int(basesCoverage)
				if species == node:
					coverage = round((basesCoverage/bp)*100, 2)
					dictionary[species].append(coverage)
	return dictionary



def get_species_group(species_list):
	mygroup = {}
	with open(species_list) as f:
		for line in f:
			assembly, tol_id, phylo_class, species_name, group = line.strip().split()
			mygroup[species_name] = group
	return mygroup



def plot_coverage(coverage, mygroup, path, species_name):
	list_sp, list_cov, list_group = [], [], []
	for species in coverage:
		list_group.append(mygroup[species])
		list_sp.append(species)
		list_cov.append(coverage[species])

	list_colors = {'Noctuoidea': 'y', 'Bombycoidea': 'peru', 'Geometroidea': 'palevioletred', 'Drepanoidea': 'steelblue', 'Pyraloidea': 'gold', 'Papilionoidea': 'darkturquoise', 'Hesperioidea': 'darkgray',
        'Gelechioidea': 'coral', 'Zygaeinoidea': 'yellow', 'Cossoidea': 'slateblue', 'Torticoidea': 'yellowgreen', 'Tineoidea': 'cornflowerblue'}
	fig, ax = plt.subplots(figsize=(15, 8))
	bplot = ax.boxplot(list_cov, positions=range(len(list_cov)), labels=list_sp, notch=True)
	plt.xticks(rotation = 90, ha = 'right', fontsize = 8)
	plt.ylabel('Coverage %')
	colors = [list_colors[x] for x in list_group]
	for artist, color in zip(bplot['boxes'], colors):
		patch = mpatches.PathPatch(artist.get_path(), color=color)
		ax.add_artist(patch)
	figure = Path(path, species_name + '_coverage.pdf')
	plt.savefig(figure, dpi = 500, bbox_inches = 'tight')



if __name__ == "__main__":
	args = parser.parse_args()
	cov_f = list(Path(args.cov).rglob('*.cov'))
	coverage_species = order_species_by_phylo(args.t, cov_f, args.bp)
	species_group = get_species_group(args.species_list)
	plot = plot_coverage(coverage_species, species_group, args.o, args.refGenome)


