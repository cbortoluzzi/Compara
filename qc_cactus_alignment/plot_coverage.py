#!/usr/bin/env python


# Author : @cb46


import argparse
from pathlib import Path
from collections import defaultdict
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches



parser = argparse.ArgumentParser(description = 'Plot coverage of 100 replicates')
parser.add_argument('--cov', help = 'Directory with all coverage files as generated by maf_stream coverage')
parser.add_argument('--bp', help = 'Length of the random interval', type=int, default=1000000)
parser.add_argument('--refGenome', help = 'Reference genome')
parser.add_argument('--species', help = 'A tab delimited file with information on species latin name, group the species belongs to, and name of the species as it appears in the cactus alignment')



def get_coverage_of_each_replicate(files, base_pair):
	"""
	Calculate coverage as proportion of sites in species A that aligns to n or more sites in species
	Input:
		files : list of all .cov files generated by maf_stream coverage
		base_pair : length of random interval (by default this is 1Mb)
	Output:
		mydict : dictionary where the key is the name of the target species and the value is the coverage expressed as %
	"""
	mydict = defaultdict(list)
	for file in files:
		with open(file) as f:
			next(f)
			for line in f:
				query, target, lengthOfReference, percentCoverage, basesCoverage = line.strip().split()
				percentage_basesCoverage = round((int(basesCoverage)/base_pair)*100, 2)
				mydict[target].append(percentage_basesCoverage)
	return mydict


def get_species_group(species, mydict):
	"""
	Obtain for each species the group it belongs to
	Input:
		species : a tab delimited file with information on species latin name, group the species belongs to, and name of the species as it appears in the cactus alignment
		mydict : dictionary generated by the previous function
	Output:
		myspecies : dictionary reporting the species name (as in the alignment), group, and coverage expressed as %
	"""
	myspecies = {}
	with open(species) as f:
		for line in f:
			species_name, group, genome = line.strip().split()
			myspecies[genome, group] = mydict[genome]
	return myspecies



def plot_coverage(myspecies, path, query):
	"""
	Plot the coverage of each species as a boxplot
	Input:
		myspecies : dictionary generated by the previous function
		path : name of output directory where the plot will be saved
		query : name of species used in the alignment as reference or query
	Output:
		boxplot
	"""
	species, values, group = [], [], []
	for key, value in myspecies.items():
		values.append(value)
		species.append(key[0])
		group.append(key[1])

	figure = Path(path, 'coverage_'+query+'.png')
	fig, ax = plt.subplots(figsize=(20,10))
	# Boxplot
	bplot = ax.boxplot(values, positions=range(len(values)), labels=species, notch=True)
	plt.xticks(rotation=45, ha='right', fontsize=8)
	# Set color based on group a species belongs to: gold for moth and purple for butterfly
	colors = ['gold' if x == 'Moth' else 'purple' for x in group]
	for artist, color in zip(bplot['boxes'], colors):
		patch = mpatches.PathPatch(artist.get_path(), color=color)
		ax.add_artist(patch)
	plt.savefig(figure, dpi = 500, bbox_inches = 'tight')



if __name__ == "__main__":
	args = parser.parse_args()
	# Get list of all coverage files generated by maf_stream coverage
	coverage_files = list(Path(args.cov).rglob('*.cov'))
	coverage_per_replicate = get_coverage_of_each_replicate(coverage_files, args.bp)
	group = get_species_group(args.species, coverage_per_replicate)
	plot = plot_coverage(group, args.cov, args.refGenome)

  
